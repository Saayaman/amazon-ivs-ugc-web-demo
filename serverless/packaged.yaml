AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: UGC Demo
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 30
    MemorySize: 128
    Environment:
      Variables:
        METADATAS_TABLE_NAME:
          Ref: MetadatasTable
        CHANNELS_TABLE_NAME:
          Ref: ChannelsTable
        COGNITO_USER_POOL_ID:
          Ref: UserPool
        COGNITO_USER_POOL_CLIENT_ID:
          Ref: UserPoolClient
Parameters:
  AuthName:
    Type: String
    Description: Unique Auth Name for Cognito Resources
    Default: ugc
  DependenciesBucket:
    Type: String
    Description: S3 bucket where dependencies reside
Resources:
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: ${AWS::StackName}-ugc-node-modules
      Description: For IVS support and JWT
      ContentUri:
        Bucket:
          Ref: DependenciesBucket
        Key: nodejs.zip
      CompatibleRuntimes:
      - nodejs12.x
      LicenseInfo: MIT
      RetentionPolicy: Retain
  PreSignUpLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-presignup-trigger
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Layers:
      - Ref: LambdaLayer
      Handler: index.preSignUp
  PreSignUpLambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - PreSignUpLambda
        - Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - UserPool
        - Arn
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AuthName}-user-pool
      MfaConfiguration: 'OFF'
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
      LambdaConfig:
        PreSignUp:
          Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-presignup-trigger
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AuthName}-client
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Fn::Sub: ${AuthName}Identity
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
          - UserPool
          - ProviderName
  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
      - PolicyName: CognitoUnauthorizedPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            Resource: '*'
  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      Policies:
      - PolicyName: CognitoAuthorizedPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            - cognito-identity:*
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
  MetadatasTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  ChannelsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  SignUpLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.signUp
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChannelsTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /signUp
            Method: POST
  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.authUser
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /auth
            Method: POST
  GetUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getUser
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /user
            Method: GET
  UpdateUserAttributeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.updateUserAttribute
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /user/attr
            Method: POST
  ChangePasswordLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.changePassword
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /user/changePassword
            Method: POST
  DeleteUserLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.deleteUser
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChannelsTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /user/delete
            Method: GET
  GetDDBChannelsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.get
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChannelsTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /
            Method: GET
  CreateChannelLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.createChannel
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MetadatasTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /channels
            Method: POST
  CreateStreamKeyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.createStreamKey
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MetadatasTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /channels/streamKey
            Method: POST
  GetChannelsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getChannels
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MetadatasTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /channels
            Method: GET
  GetStreamsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getStreams
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MetadatasTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /channels/streams
            Method: GET
  GetStreamKeysLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.getStreamKeys
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MetadatasTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /channels/streamKeys
            Method: GET
  ResetDefaultChannelStreamKeyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.resetDefaultStreamKey
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MetadatasTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /channels/default/streamKey/reset
            Method: GET
  SendMetadaLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.sendMetadata
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MetadatasTable
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /channels/metadata
            Method: POST
  IsLiveLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.isLive
      Layers:
      - Ref: LambdaLayer
      CodeUri: s3://sang-ivs-ugc-bucket/c71bc1a54fa1f84dae87dc379ddc1d12
      Timeout: 60
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ChannelsTable
      Events:
        IsLiveScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Description: Check for live stream
            Enabled: true
  UGCAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UGC-Access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ivs:ListChannels
          - ivs:GetChannel
          - ivs:CreateChannel
          - ivs:UpdateChannel
          - ivs:DeleteChannel
          - ivs:PutMetadata
          - ivs:CreateStreamKey
          - ivs:DeleteStreamKey
          - ivs:StopStream
          - ivs:ListStreams
          - ivs:GetStream
          - cognito-idp:*
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
          Resource: '*'
      Roles:
      - Ref: GetChannelsLambdaRole
      - Ref: GetStreamsLambdaRole
      - Ref: SendMetadaLambdaRole
      - Ref: SignUpLambdaRole
      - Ref: UpdateUserAttributeLambdaRole
      - Ref: ResetDefaultChannelStreamKeyLambdaRole
      - Ref: DeleteUserLambdaRole
      - Ref: IsLiveLambdaRole
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
